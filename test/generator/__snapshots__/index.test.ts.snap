// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`can generate module with models and relations 1`] = `
"import { enumType, inputObjectType, objectType, list, nonNull, nullable, arg } from \\"nexus\\"
import * as NPCLib from \\"../generator/runtime\\"
import * as PrismaLib from \\"../client\\"

export const SortDirEnum = enumType({
  name: 'SortDir',
  members: { \\"asc\\": \\"asc\\", \\"desc\\": \\"desc\\" }
})
  
export const IDFilterInputType = inputObjectType({
  name: 'IDFilterInput',
  definition(t) {
    t.id('equals')
    t.list.id('in')
    t.list.id('notIn')
    t.id('lt')
    t.id('lte')
    t.id('gt')
    t.id('gte')
    t.field('not', { type: 'IDFilterInput' as any })
  }
})
  
export const StringFilterInputType = inputObjectType({
  name: 'StringFilterInput',
  definition(t) {
    t.string('equals')
    t.string('contains')
    t.string('startsWith')
    t.string('endsWith')
    t.list.string('in')
    t.list.string('notIn')
    t.string('lt')
    t.string('lte')
    t.string('gt')
    t.string('gte')
    t.field('not', { type: 'StringFilterInput' as any })
  }
})
  
export const IntFilterInputType = inputObjectType({
  name: 'IntFilterInput',
  definition(t) {
    t.int('equals')
    t.list.int('in')
    t.list.int('notIn')
    t.int('lt')
    t.int('lte')
    t.int('gt')
    t.int('gte')
    t.field('not', { type: 'IntFilterInput' as any })
  }
})
  
export const FloatFilterInputType = inputObjectType({
  name: 'FloatFilterInput',
  definition(t) {
    t.float('equals')
    t.list.float('in')
    t.list.float('notIn')
    t.float('lt')
    t.float('lte')
    t.float('gt')
    t.float('gte')
    t.field('not', { type: 'FloatFilterInput' as any })
  }
})
  
export const BooleanFilterInputType = inputObjectType({
  name: 'BooleanFilterInput',
  definition(t) {
    t.boolean('equals')
    t.field('not', { type: 'BooleanFilterInput' as any })
  }
})
  
export const DateTimeFilterInputType = inputObjectType({
  name: 'DateTimeFilterInput',
  definition(t) {
    t.field('equals', { type: 'DateTime' as any })
    t.list.field('in', { type: 'DateTime' as any })
    t.list.field('notIn', { type: 'DateTime' as any })
    t.field('lt', { type: 'DateTime' as any })
    t.field('lte', { type: 'DateTime' as any })
    t.field('gt', { type: 'DateTime' as any })
    t.field('gte', { type: 'DateTime' as any })
    t.field('not', { type: 'DateTimeFilterInput' as any })
  }
})
  
export const RelatedCountOrderByInputType = inputObjectType({
  name: 'RelatedCountOrderByInput',
  definition(t) {
    t.field('_count', { type: 'SortDir' as any })
  }
})
  
const UserModel = {
  $name: 'User',
  id: {
    name: 'id',
    type: nonNull('Int' as any)
  },
  username: {
    name: 'username',
    type: nonNull('String' as any)
  },
  name: {
    name: 'name',
    type: nullable('String' as any)
  },
  age: {
    name: 'age',
    type: nullable('Int' as any)
  }
}
  
const UserWhere = {
  $name: 'UserWhereInput',
  id: {
    name: 'id',
    type: nullable('IntFilterInput' as any)
  },
  username: {
    name: 'username',
    type: nullable('StringFilterInput' as any)
  },
  name: {
    name: 'name',
    type: nullable('StringFilterInput' as any)
  },
  age: {
    name: 'age',
    type: nullable('IntFilterInput' as any)
  },
  AND: {
    name: 'AND',
    type: nullable(list('UserWhereInput' as any))
  },
  OR: {
    name: 'OR',
    type: nullable(list('UserWhereInput' as any))
  },
  NOT: {
    name: 'NOT',
    type: nullable(list('UserWhereInput' as any))
  }
}
  
const buildUserWhereInput = NPCLib.createInputTypeBuilder(UserWhere)
  
export const UserWhereInputType = buildUserWhereInput()
  
const UserListRelationWhereInputType = inputObjectType({
  name: 'UserListRelationWhereInput',
  definition(t) {
    t.field('every', { type: 'UserWhereInput' as any })
    t.field('some', { type: 'UserWhereInput' as any })
    t.field('none', { type: 'UserWhereInput' as any })
  }
})
  
const UserOrderBy = {
  $name: 'UserOrderByInput',
  id: {
    name: 'id',
    type: 'SortDir'
  },
  username: {
    name: 'username',
    type: 'SortDir'
  },
  name: {
    name: 'name',
    type: 'SortDir'
  },
  age: {
    name: 'age',
    type: 'SortDir'
  }
}
  
const buildUserOrderByInput = NPCLib.createInputTypeBuilder(UserOrderBy)
  
export const UserOrderByInputType = buildUserOrderByInput()
  
const userQueryOneResolver = NPCLib.createQueryOneFieldResolver<PrismaLib.User, { id: PrismaLib.User[\\"id\\"] }>('User')
  
const userQueryOneField = NPCLib.createQueryOneFieldBuilder({
  modelName: 'User',
  defaultQueryName: 'user',
  defaultResolver: userQueryOneResolver,
  args: { id: nonNull(arg({ type: 'Int' as any })) }
})
  
export const UserListType = objectType({
  name: 'UserList',
  definition(t) {
    t.nonNull.list.field('items', { type: nonNull('User') })
    t.nonNull.int('total')
  }
})
  
const userQueryListResolver = NPCLib.createQueryListFieldResolver<PrismaLib.Prisma.UserFindManyArgs, PrismaLib.User>('User')
  
const userQueryListField = NPCLib.createQueryListFieldBuilder({
  outputTypeName: 'UserList',
  defaultQueryName: 'userList',
  defaultResolver: userQueryListResolver,
  whereInputBuilder: buildUserWhereInput,
  orderByInputBuilder: buildUserOrderByInput,
  defaultWhereInputName: 'UserWhereInput',
  defaultOrderByInputName: 'UserOrderByInput'
})
  
const UserCreate = {
  $name: 'UserCreateInput',
  username: {
    name: 'username',
    type: nonNull('String' as any)
  },
  name: {
    name: 'name',
    type: nullable('String' as any)
  },
  age: {
    name: 'age',
    type: nullable('Int' as any)
  }
}
  
const buildUserCreateInput = NPCLib.createInputTypeBuilder(UserCreate)
  
export const UserCreateInputType = buildUserCreateInput()
  
const userMutationCreateOneResolver = NPCLib.createCreateMutationResolver<PrismaLib.Prisma.UserCreateArgs[\\"data\\"], PrismaLib.User>('User')
  
const userMutationCreateOneField = NPCLib.createMutationFieldBuilder({
  modelName: 'User',
  defaultMutationName: 'userCreate',
  defaultResolver: userMutationCreateOneResolver,
  inputBuilder: buildUserCreateInput,
  defaultInputType: 'UserCreateInput'
})
  
const UserUpdate = {
  $name: 'UserUpdateInput',
  id: {
    name: 'id',
    type: nonNull('Int' as any)
  },
  username: {
    name: 'username',
    type: nullable('String' as any)
  },
  name: {
    name: 'name',
    type: nullable('String' as any)
  },
  age: {
    name: 'age',
    type: nullable('Int' as any)
  }
}
  
const buildUserUpdateInput = NPCLib.createInputTypeBuilder(UserUpdate, ['id'])
  
export const UserUpdateInputType = buildUserUpdateInput()
  

type UserUpdateDataType = NPCLib.DeepNullable<Omit<PrismaLib.Prisma.UserUpdateArgs[\\"data\\"], 'id'>> & Pick<PrismaLib.User, 'id'>
  

const userMutationUpdateOneResolver = NPCLib.createUpdateMutationResolver<UserUpdateDataType, PrismaLib.User>('User', ['id'])
  
const userMutationUpdateOneField = NPCLib.createMutationFieldBuilder({
  modelName: 'User',
  defaultMutationName: 'userUpdate',
  defaultResolver: userMutationUpdateOneResolver,
  inputBuilder: buildUserUpdateInput,
  defaultInputType: 'UserUpdateInput'
})
  
const userMutationDeleteOneResolver = NPCLib.createMutationDeleteFieldResolver<PrismaLib.User, { id: PrismaLib.User[\\"id\\"] }>('User')
  
const userMutationDeleteOneField = NPCLib.createMutationDeleteFieldBuilder({
  modelName: 'User',
  defaultMutationName: 'userDelete',
  defaultResolver: userMutationDeleteOneResolver,
  args: { id: nonNull(arg({ type: 'Int' as any })) }
})
  
export const UserCRUD = {
  Model: UserModel,
  Where: UserWhere,
  whereInputType: buildUserWhereInput,
  OrderBy: UserOrderBy,
  orderByInputType: buildUserOrderByInput,
  queryOne: userQueryOneField,
  queryOneResolver: userQueryOneResolver,
  queryList: userQueryListField,
  queryListResolver: userQueryListResolver,
  Create: UserCreate,
  createInputType: buildUserCreateInput,
  mutationCreate: userMutationCreateOneField,
  mutationCreateResolver: userMutationCreateOneResolver,
  Update: UserUpdate,
  updateInputType: buildUserUpdateInput,
  mutationUpdate: userMutationUpdateOneField,
  mutationUpdateResolver: userMutationUpdateOneResolver,
  mutationDelete: userMutationDeleteOneField,
  mutationDeleteResolver: userMutationDeleteOneResolver,
}
  
const ClientModel = {
  $name: 'Client',
  id: {
    name: 'id',
    type: nonNull('Int' as any)
  },
  name: {
    name: 'name',
    type: nullable('String' as any)
  },
  age: {
    name: 'age',
    type: nullable('Int' as any)
  },
  contacts: {
    name: 'contacts',
    type: nonNull(list(nonNull('Contact' as any))),
    resolve: NPCLib.createRelationFieldResolver<PrismaLib.Client, PrismaLib.Contact[]>('Client', 'contacts', ['id'])
  }
}
  
const ClientWhere = {
  $name: 'ClientWhereInput',
  id: {
    name: 'id',
    type: nullable('IntFilterInput' as any)
  },
  name: {
    name: 'name',
    type: nullable('StringFilterInput' as any)
  },
  age: {
    name: 'age',
    type: nullable('IntFilterInput' as any)
  },
  contacts: {
    name: 'contacts',
    type: nullable('ContactListRelationWhereInput' as any)
  },
  AND: {
    name: 'AND',
    type: nullable(list('ClientWhereInput' as any))
  },
  OR: {
    name: 'OR',
    type: nullable(list('ClientWhereInput' as any))
  },
  NOT: {
    name: 'NOT',
    type: nullable(list('ClientWhereInput' as any))
  }
}
  
const buildClientWhereInput = NPCLib.createInputTypeBuilder(ClientWhere)
  
export const ClientWhereInputType = buildClientWhereInput()
  
const ClientListRelationWhereInputType = inputObjectType({
  name: 'ClientListRelationWhereInput',
  definition(t) {
    t.field('every', { type: 'ClientWhereInput' as any })
    t.field('some', { type: 'ClientWhereInput' as any })
    t.field('none', { type: 'ClientWhereInput' as any })
  }
})
  
const ClientOrderBy = {
  $name: 'ClientOrderByInput',
  id: {
    name: 'id',
    type: 'SortDir'
  },
  name: {
    name: 'name',
    type: 'SortDir'
  },
  age: {
    name: 'age',
    type: 'SortDir'
  },
  contacts: {
    name: 'contacts',
    type: 'RelatedCountOrderByInput'
  }
}
  
const buildClientOrderByInput = NPCLib.createInputTypeBuilder(ClientOrderBy)
  
export const ClientOrderByInputType = buildClientOrderByInput()
  
const clientQueryOneResolver = NPCLib.createQueryOneFieldResolver<PrismaLib.Client, { id: PrismaLib.Client[\\"id\\"] }>('Client')
  
const clientQueryOneField = NPCLib.createQueryOneFieldBuilder({
  modelName: 'Client',
  defaultQueryName: 'client',
  defaultResolver: clientQueryOneResolver,
  args: { id: nonNull(arg({ type: 'Int' as any })) }
})
  
export const ClientListType = objectType({
  name: 'ClientList',
  definition(t) {
    t.nonNull.list.field('items', { type: nonNull('Client') })
    t.nonNull.int('total')
  }
})
  
const clientQueryListResolver = NPCLib.createQueryListFieldResolver<PrismaLib.Prisma.ClientFindManyArgs, PrismaLib.Client>('Client')
  
const clientQueryListField = NPCLib.createQueryListFieldBuilder({
  outputTypeName: 'ClientList',
  defaultQueryName: 'clientList',
  defaultResolver: clientQueryListResolver,
  whereInputBuilder: buildClientWhereInput,
  orderByInputBuilder: buildClientOrderByInput,
  defaultWhereInputName: 'ClientWhereInput',
  defaultOrderByInputName: 'ClientOrderByInput'
})
  
const ClientCreate = {
  $name: 'ClientCreateInput',
  name: {
    name: 'name',
    type: nullable('String' as any)
  },
  age: {
    name: 'age',
    type: nullable('Int' as any)
  }
}
  
const buildClientCreateInput = NPCLib.createInputTypeBuilder(ClientCreate)
  
export const ClientCreateInputType = buildClientCreateInput()
  
const clientMutationCreateOneResolver = NPCLib.createCreateMutationResolver<PrismaLib.Prisma.ClientCreateArgs[\\"data\\"], PrismaLib.Client>('Client')
  
const clientMutationCreateOneField = NPCLib.createMutationFieldBuilder({
  modelName: 'Client',
  defaultMutationName: 'clientCreate',
  defaultResolver: clientMutationCreateOneResolver,
  inputBuilder: buildClientCreateInput,
  defaultInputType: 'ClientCreateInput'
})
  
const ClientUpdate = {
  $name: 'ClientUpdateInput',
  id: {
    name: 'id',
    type: nonNull('Int' as any)
  },
  name: {
    name: 'name',
    type: nullable('String' as any)
  },
  age: {
    name: 'age',
    type: nullable('Int' as any)
  }
}
  
const buildClientUpdateInput = NPCLib.createInputTypeBuilder(ClientUpdate, ['id'])
  
export const ClientUpdateInputType = buildClientUpdateInput()
  

type ClientUpdateDataType = NPCLib.DeepNullable<Omit<PrismaLib.Prisma.ClientUpdateArgs[\\"data\\"], 'id'>> & Pick<PrismaLib.Client, 'id'>
  

const clientMutationUpdateOneResolver = NPCLib.createUpdateMutationResolver<ClientUpdateDataType, PrismaLib.Client>('Client', ['id'])
  
const clientMutationUpdateOneField = NPCLib.createMutationFieldBuilder({
  modelName: 'Client',
  defaultMutationName: 'clientUpdate',
  defaultResolver: clientMutationUpdateOneResolver,
  inputBuilder: buildClientUpdateInput,
  defaultInputType: 'ClientUpdateInput'
})
  
const clientMutationDeleteOneResolver = NPCLib.createMutationDeleteFieldResolver<PrismaLib.Client, { id: PrismaLib.Client[\\"id\\"] }>('Client')
  
const clientMutationDeleteOneField = NPCLib.createMutationDeleteFieldBuilder({
  modelName: 'Client',
  defaultMutationName: 'clientDelete',
  defaultResolver: clientMutationDeleteOneResolver,
  args: { id: nonNull(arg({ type: 'Int' as any })) }
})
  
export const ClientCRUD = {
  Model: ClientModel,
  Where: ClientWhere,
  whereInputType: buildClientWhereInput,
  OrderBy: ClientOrderBy,
  orderByInputType: buildClientOrderByInput,
  queryOne: clientQueryOneField,
  queryOneResolver: clientQueryOneResolver,
  queryList: clientQueryListField,
  queryListResolver: clientQueryListResolver,
  Create: ClientCreate,
  createInputType: buildClientCreateInput,
  mutationCreate: clientMutationCreateOneField,
  mutationCreateResolver: clientMutationCreateOneResolver,
  Update: ClientUpdate,
  updateInputType: buildClientUpdateInput,
  mutationUpdate: clientMutationUpdateOneField,
  mutationUpdateResolver: clientMutationUpdateOneResolver,
  mutationDelete: clientMutationDeleteOneField,
  mutationDeleteResolver: clientMutationDeleteOneResolver,
}
  
const ContactModel = {
  $name: 'Contact',
  id: {
    name: 'id',
    type: nonNull('Int' as any)
  },
  name: {
    name: 'name',
    type: nonNull('String' as any)
  },
  phone: {
    name: 'phone',
    type: nullable('String' as any)
  },
  client: {
    name: 'client',
    type: nonNull('Client' as any),
    resolve: NPCLib.createRelationFieldResolver<PrismaLib.Contact, PrismaLib.Client>('Contact', 'client', ['id'])
  },
  clientId: {
    name: 'clientId',
    type: nonNull('Int' as any)
  }
}
  
const ContactWhere = {
  $name: 'ContactWhereInput',
  id: {
    name: 'id',
    type: nullable('IntFilterInput' as any)
  },
  name: {
    name: 'name',
    type: nullable('StringFilterInput' as any)
  },
  phone: {
    name: 'phone',
    type: nullable('StringFilterInput' as any)
  },
  client: {
    name: 'client',
    type: nullable('ClientWhereInput' as any)
  },
  clientId: {
    name: 'clientId',
    type: nullable('IntFilterInput' as any)
  },
  AND: {
    name: 'AND',
    type: nullable(list('ContactWhereInput' as any))
  },
  OR: {
    name: 'OR',
    type: nullable(list('ContactWhereInput' as any))
  },
  NOT: {
    name: 'NOT',
    type: nullable(list('ContactWhereInput' as any))
  }
}
  
const buildContactWhereInput = NPCLib.createInputTypeBuilder(ContactWhere)
  
export const ContactWhereInputType = buildContactWhereInput()
  
const ContactListRelationWhereInputType = inputObjectType({
  name: 'ContactListRelationWhereInput',
  definition(t) {
    t.field('every', { type: 'ContactWhereInput' as any })
    t.field('some', { type: 'ContactWhereInput' as any })
    t.field('none', { type: 'ContactWhereInput' as any })
  }
})
  
const ContactOrderBy = {
  $name: 'ContactOrderByInput',
  id: {
    name: 'id',
    type: 'SortDir'
  },
  name: {
    name: 'name',
    type: 'SortDir'
  },
  phone: {
    name: 'phone',
    type: 'SortDir'
  },
  client: {
    name: 'client',
    type: 'ClientOrderByInput'
  },
  clientId: {
    name: 'clientId',
    type: 'SortDir'
  }
}
  
const buildContactOrderByInput = NPCLib.createInputTypeBuilder(ContactOrderBy)
  
export const ContactOrderByInputType = buildContactOrderByInput()
  
const contactQueryOneResolver = NPCLib.createQueryOneFieldResolver<PrismaLib.Contact, { id: PrismaLib.Contact[\\"id\\"] }>('Contact')
  
const contactQueryOneField = NPCLib.createQueryOneFieldBuilder({
  modelName: 'Contact',
  defaultQueryName: 'contact',
  defaultResolver: contactQueryOneResolver,
  args: { id: nonNull(arg({ type: 'Int' as any })) }
})
  
export const ContactListType = objectType({
  name: 'ContactList',
  definition(t) {
    t.nonNull.list.field('items', { type: nonNull('Contact') })
    t.nonNull.int('total')
  }
})
  
const contactQueryListResolver = NPCLib.createQueryListFieldResolver<PrismaLib.Prisma.ContactFindManyArgs, PrismaLib.Contact>('Contact')
  
const contactQueryListField = NPCLib.createQueryListFieldBuilder({
  outputTypeName: 'ContactList',
  defaultQueryName: 'contactList',
  defaultResolver: contactQueryListResolver,
  whereInputBuilder: buildContactWhereInput,
  orderByInputBuilder: buildContactOrderByInput,
  defaultWhereInputName: 'ContactWhereInput',
  defaultOrderByInputName: 'ContactOrderByInput'
})
  
const ContactCreate = {
  $name: 'ContactCreateInput',
  name: {
    name: 'name',
    type: nonNull('String' as any)
  },
  phone: {
    name: 'phone',
    type: nullable('String' as any)
  },
  clientId: {
    name: 'clientId',
    type: nonNull('Int' as any)
  }
}
  
const buildContactCreateInput = NPCLib.createInputTypeBuilder(ContactCreate)
  
export const ContactCreateInputType = buildContactCreateInput()
  
const contactMutationCreateOneResolver = NPCLib.createCreateMutationResolver<PrismaLib.Prisma.ContactCreateArgs[\\"data\\"], PrismaLib.Contact>('Contact')
  
const contactMutationCreateOneField = NPCLib.createMutationFieldBuilder({
  modelName: 'Contact',
  defaultMutationName: 'contactCreate',
  defaultResolver: contactMutationCreateOneResolver,
  inputBuilder: buildContactCreateInput,
  defaultInputType: 'ContactCreateInput'
})
  
const ContactUpdate = {
  $name: 'ContactUpdateInput',
  id: {
    name: 'id',
    type: nonNull('Int' as any)
  },
  name: {
    name: 'name',
    type: nullable('String' as any)
  },
  phone: {
    name: 'phone',
    type: nullable('String' as any)
  },
  clientId: {
    name: 'clientId',
    type: nullable('Int' as any)
  }
}
  
const buildContactUpdateInput = NPCLib.createInputTypeBuilder(ContactUpdate, ['id'])
  
export const ContactUpdateInputType = buildContactUpdateInput()
  

type ContactUpdateDataType = NPCLib.DeepNullable<Omit<PrismaLib.Prisma.ContactUpdateArgs[\\"data\\"], 'id'>> & Pick<PrismaLib.Contact, 'id'>
  

const contactMutationUpdateOneResolver = NPCLib.createUpdateMutationResolver<ContactUpdateDataType, PrismaLib.Contact>('Contact', ['id'])
  
const contactMutationUpdateOneField = NPCLib.createMutationFieldBuilder({
  modelName: 'Contact',
  defaultMutationName: 'contactUpdate',
  defaultResolver: contactMutationUpdateOneResolver,
  inputBuilder: buildContactUpdateInput,
  defaultInputType: 'ContactUpdateInput'
})
  
const contactMutationDeleteOneResolver = NPCLib.createMutationDeleteFieldResolver<PrismaLib.Contact, { id: PrismaLib.Contact[\\"id\\"] }>('Contact')
  
const contactMutationDeleteOneField = NPCLib.createMutationDeleteFieldBuilder({
  modelName: 'Contact',
  defaultMutationName: 'contactDelete',
  defaultResolver: contactMutationDeleteOneResolver,
  args: { id: nonNull(arg({ type: 'Int' as any })) }
})
  
export const ContactCRUD = {
  Model: ContactModel,
  Where: ContactWhere,
  whereInputType: buildContactWhereInput,
  OrderBy: ContactOrderBy,
  orderByInputType: buildContactOrderByInput,
  queryOne: contactQueryOneField,
  queryOneResolver: contactQueryOneResolver,
  queryList: contactQueryListField,
  queryListResolver: contactQueryListResolver,
  Create: ContactCreate,
  createInputType: buildContactCreateInput,
  mutationCreate: contactMutationCreateOneField,
  mutationCreateResolver: contactMutationCreateOneResolver,
  Update: ContactUpdate,
  updateInputType: buildContactUpdateInput,
  mutationUpdate: contactMutationUpdateOneField,
  mutationUpdateResolver: contactMutationUpdateOneResolver,
  mutationDelete: contactMutationDeleteOneField,
  mutationDeleteResolver: contactMutationDeleteOneResolver,
}
  
export const generatedTypes = {
  'SortDir': SortDirEnum,
  'IDFilterInput': IDFilterInputType,
  'StringFilterInput': StringFilterInputType,
  'IntFilterInput': IntFilterInputType,
  'FloatFilterInput': FloatFilterInputType,
  'BooleanFilterInput': BooleanFilterInputType,
  'DateTimeFilterInput': DateTimeFilterInputType,
  'RelatedCountOrderByInput': RelatedCountOrderByInputType,
  'UserWhereInput': UserWhereInputType,
  'UserListRelationWhereInput': UserListRelationWhereInputType,
  'UserOrderByInput': UserOrderByInputType,
  'UserList': UserListType,
  'UserCreateInput': UserCreateInputType,
  'UserUpdateInput': UserUpdateInputType,
  'ClientWhereInput': ClientWhereInputType,
  'ClientListRelationWhereInput': ClientListRelationWhereInputType,
  'ClientOrderByInput': ClientOrderByInputType,
  'ClientList': ClientListType,
  'ClientCreateInput': ClientCreateInputType,
  'ClientUpdateInput': ClientUpdateInputType,
  'ContactWhereInput': ContactWhereInputType,
  'ContactListRelationWhereInput': ContactListRelationWhereInputType,
  'ContactOrderByInput': ContactOrderByInputType,
  'ContactList': ContactListType,
  'ContactCreateInput': ContactCreateInputType,
  'ContactUpdateInput': ContactUpdateInputType,
}
"
`;
